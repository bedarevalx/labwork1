	Для выполнения этой работы, я установил Git, настроил его, затем создал папку labrab1, в которой создал текстовый документ в кодировке Windows 1251, затем инициализировал Git (git init). Сделав это, я добавил текстовый файл в репозиторий проекта, проиндексировал его (git add <filename>), и сделал коммит (git commit -m <Commentary>)
	После этого, я снова проиндексировал этот файл, и сделал еще 1 коммит, который называется First Notes
	Затем, для того, чтобы показать игнорирование с помощью Git, я создал в папке с проектом файл .gitignore, в котором хранятся шаблоны для игнорирования, касательно данного проекта. Я внёс в списко игнорируемых элементов название файла "README.txt", затем, чтобы проверить работу, я создал данный файл в папке с проектом и попытался добавить его к в репозиторий, что у меня не удалось. Следовательно, игнорирование работает, теперь можно использовать команду "git add ." и не боятся наличия лишних файлов в репозитории проекта.
	Совершив вышеперечисленные действия, я сделал коммит (Ignoring README)
	Для того, чтобы показать как работает сравнение с помощью Git, я использовал команду
git diff <hash1> <hash2>. Прилагаю скриншот с использованием этой команды.
	Затем я перенес этот скриншот в созданную папку photos с помощью команды git mv. Также прилагаю скриншот с использованием этой команды
	Для демонстрирования удаления файлов, я создал файл mustdel.txt, добавил его в репозиторий проекта, затем удалил с помощью команды git rm <filename>, создал 2 коммита, в первом я создал файл, во втором удалил.
	Я написал нежелательную надпись в этом файле, затем проиндексировал файл и создал коммит, потом для того, чтобы отменить его, я применил команду git revert, создав еще 1 коммит, отменяющий предыдущий. Затем, поставив тэг на коммит Fixed deletion to report, я применил команду git remove --hard <nametag> для того, чтобы удалить нежелательные коммиты.
В папке photos есть скриншоты выполнения этих команд
	Для того, чтобы создать ветку, я использовал команду git checkout -b <branch> и создал ветку newbranch, затем я переместился на ветку master (git checkout master)
и создал там файл conflict.txt, в котором написал текст, затем проиндексировал и сделал коммит, эти же действия я повторил на ветке newbranch, но написал в этом файле другой текст. Тем самым я создал конфликт для merge. Затем исправив конфликт, я командой git merge newbranch произвёл слияние двух веток, затем командой git branch -d <branchname> я удалил ветку newbranch. После этого я отметил эти действия в отчете и сделал коммит
	Чтобы продемонстрировать работу git stash, я напечатал этот текст, затем применил команду git stash, спрятав эти изменения, добавил скриншот команды git stash list, добавил коммит на добавление скриншота, затем применил изменения git stash apply и сделал коммит.
